syntax = "v1"

info (
	title:   "上传服务"
	desc:    "提供文件上传相关的API接口"
	author:  "lfj"
	email:   "1665834268@qq.com"
	version: "v1"
)

import (
	"proto/upload.api"
	"proto/history.api"
)

//============================> uploadservice v1 <============================
//need login
@server (
	prefix: upload_service/v1
	jwt:    JwtAuth
)
service upload_service {
	@doc (
		summary:     "普通文件上传"
		description: "用于上传小文件（<20MB）"
	)
	@handler FileUpload
	post /file/upload (FileUploadRequest) returns (FileUploadResponse)
}

//need login
@server (
	prefix: upload_service/v1
	group:  chunk
	jwt:    JwtAuth
)
service upload_service {
	@doc (
		summary:     "初始化分片上传"
		description: "初始化一个分片上传任务，获取uploadId"
	)
	@handler InitiateMultipartUpload
	post /file/multipart/init (ChunkUploadInitRequest) returns (ChunkUploadInitResponse)

	@doc (
		summary:     "上传分片"
		description: "上传单个分片数据"
	)
	@handler UploadPart
	post /file/multipart/upload (ChunkUploadRequest) returns (ChunkUploadResponse)

	@doc (
		summary:     "完成分片上传"
		description: "完成分片上传任务，合并所有分片"
	)
	@handler CompleteMultipartUpload
	post /file/multipart/complete (ChunkUploadCompleteRequest) returns (ChunkUploadCompleteResponse)

	@doc (
		summary:     "查询分片上传状态"
		description: "查询已上传的分片状态，用于断点续传"
	)
	@handler ListUploadedParts
	get /file/multipart/status (ListPartsRequest) returns (ListPartsResponse)
}

//need login
@server (
	prefix: upload_service/v1
	group:  history
	jwt:    JwtAuth
)
service upload_service {
	@doc (
		summary:     "更新历史上传记录"
	)
	@handler UpdateHistory
	post /file/history/update (UpdateHistoryRequest) returns (UpdateHistoryResponse)

	@doc (
		summary:     "历史记录列表"
	)
	@handler HistoryList
	get /file/history/list (HistoryListRequest) returns (HistoryListResponse)
}


// goctl api go --api *.api --dir ./..

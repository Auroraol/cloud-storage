// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: upload_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadServiceRpc_GetRepositoryPoolByRepositoryId_FullMethodName = "/pb.UploadServiceRpc/getRepositoryPoolByRepositoryId"
	UploadServiceRpc_DeleteById_FullMethodName                      = "/pb.UploadServiceRpc/deleteById"
)

// UploadServiceRpcClient is the client API for UploadServiceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceRpcClient interface {
	GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error)
	DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error)
}

type uploadServiceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceRpcClient(cc grpc.ClientConnInterface) UploadServiceRpcClient {
	return &uploadServiceRpcClient{cc}
}

func (c *uploadServiceRpcClient) GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryResp)
	err := c.cc.Invoke(ctx, UploadServiceRpc_GetRepositoryPoolByRepositoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceRpcClient) DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdResp)
	err := c.cc.Invoke(ctx, UploadServiceRpc_DeleteById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceRpcServer is the server API for UploadServiceRpc service.
// All implementations must embed UnimplementedUploadServiceRpcServer
// for forward compatibility.
type UploadServiceRpcServer interface {
	GetRepositoryPoolByRepositoryId(context.Context, *RepositoryReq) (*RepositoryResp, error)
	DeleteById(context.Context, *DeleteByIdReq) (*DeleteByIdResp, error)
	mustEmbedUnimplementedUploadServiceRpcServer()
}

// UnimplementedUploadServiceRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadServiceRpcServer struct{}

func (UnimplementedUploadServiceRpcServer) GetRepositoryPoolByRepositoryId(context.Context, *RepositoryReq) (*RepositoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryPoolByRepositoryId not implemented")
}
func (UnimplementedUploadServiceRpcServer) DeleteById(context.Context, *DeleteByIdReq) (*DeleteByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedUploadServiceRpcServer) mustEmbedUnimplementedUploadServiceRpcServer() {}
func (UnimplementedUploadServiceRpcServer) testEmbeddedByValue()                          {}

// UnsafeUploadServiceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceRpcServer will
// result in compilation errors.
type UnsafeUploadServiceRpcServer interface {
	mustEmbedUnimplementedUploadServiceRpcServer()
}

func RegisterUploadServiceRpcServer(s grpc.ServiceRegistrar, srv UploadServiceRpcServer) {
	// If the following call pancis, it indicates UnimplementedUploadServiceRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadServiceRpc_ServiceDesc, srv)
}

func _UploadServiceRpc_GetRepositoryPoolByRepositoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceRpcServer).GetRepositoryPoolByRepositoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadServiceRpc_GetRepositoryPoolByRepositoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceRpcServer).GetRepositoryPoolByRepositoryId(ctx, req.(*RepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadServiceRpc_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceRpcServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadServiceRpc_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceRpcServer).DeleteById(ctx, req.(*DeleteByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadServiceRpc_ServiceDesc is the grpc.ServiceDesc for UploadServiceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadServiceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UploadServiceRpc",
	HandlerType: (*UploadServiceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRepositoryPoolByRepositoryId",
			Handler:    _UploadServiceRpc_GetRepositoryPoolByRepositoryId_Handler,
		},
		{
			MethodName: "deleteById",
			Handler:    _UploadServiceRpc_DeleteById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload_service.proto",
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: upload_service.proto

package uploadservicerpc

import (
	"context"

	"github.com/Auroraol/cloud-storage/upload_service/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteByIdReq  = pb.DeleteByIdReq
	DeleteByIdResp = pb.DeleteByIdResp
	RepositoryReq  = pb.RepositoryReq
	RepositoryResp = pb.RepositoryResp

	UploadServiceRpc interface {
		GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error)
		DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error)
	}

	defaultUploadServiceRpc struct {
		cli zrpc.Client
	}
)

func NewUploadServiceRpc(cli zrpc.Client) UploadServiceRpc {
	return &defaultUploadServiceRpc{
		cli: cli,
	}
}

func (m *defaultUploadServiceRpc) GetRepositoryPoolByRepositoryId(ctx context.Context, in *RepositoryReq, opts ...grpc.CallOption) (*RepositoryResp, error) {
	client := pb.NewUploadServiceRpcClient(m.cli.Conn())
	return client.GetRepositoryPoolByRepositoryId(ctx, in, opts...)
}

func (m *defaultUploadServiceRpc) DeleteById(ctx context.Context, in *DeleteByIdReq, opts ...grpc.CallOption) (*DeleteByIdResp, error) {
	client := pb.NewUploadServiceRpcClient(m.cli.Conn())
	return client.DeleteById(ctx, in, opts...)
}

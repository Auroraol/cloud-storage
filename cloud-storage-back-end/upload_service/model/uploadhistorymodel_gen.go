// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	uploadHistoryFieldNames          = builder.RawFieldNames(&UploadHistory{})
	uploadHistoryRows                = strings.Join(uploadHistoryFieldNames, ",")
	uploadHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(uploadHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	uploadHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(uploadHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUploadHistoryIdPrefix           = "cache:uploadHistory:id:"
	cacheUploadHistoryRepositoryIdPrefix = "cache:uploadHistory:repositoryId:"
)

type (
	uploadHistoryModel interface {
		Insert(ctx context.Context, data *UploadHistory) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UploadHistory, error)
		FindOneByRepositoryId(ctx context.Context, repositoryId uint64) (*UploadHistory, error)
		Update(ctx context.Context, data *UploadHistory) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUploadHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	UploadHistory struct {
		Id           uint64    `db:"id"`
		UserId       uint64    `db:"user_id"`       // 用户id
		FileName     string    `db:"file_name"`     // 文件名
		Size         int64     `db:"size"`          // 文件大小
		RepositoryId uint64    `db:"repository_id"` // 文件id
		Status       int64     `db:"status"`        // 上传状态，0：上传中，1：上传成功，2：上传失败
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newUploadHistoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUploadHistoryModel {
	return &defaultUploadHistoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`upload_history`",
	}
}

func (m *defaultUploadHistoryModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	uploadHistoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryIdPrefix, id)
	uploadHistoryRepositoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryRepositoryIdPrefix, data.RepositoryId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, uploadHistoryIdKey, uploadHistoryRepositoryIdKey)
	return err
}

func (m *defaultUploadHistoryModel) FindOne(ctx context.Context, id uint64) (*UploadHistory, error) {
	uploadHistoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryIdPrefix, id)
	var resp UploadHistory
	err := m.QueryRowCtx(ctx, &resp, uploadHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUploadHistoryModel) FindOneByRepositoryId(ctx context.Context, repositoryId uint64) (*UploadHistory, error) {
	uploadHistoryRepositoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryRepositoryIdPrefix, repositoryId)
	var resp UploadHistory
	err := m.QueryRowIndexCtx(ctx, &resp, uploadHistoryRepositoryIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `repository_id` = ? limit 1", uploadHistoryRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, repositoryId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUploadHistoryModel) Insert(ctx context.Context, data *UploadHistory) (sql.Result, error) {
	uploadHistoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryIdPrefix, data.Id)
	uploadHistoryRepositoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryRepositoryIdPrefix, data.RepositoryId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, uploadHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.FileName, data.Size, data.RepositoryId, data.Status)
	}, uploadHistoryIdKey, uploadHistoryRepositoryIdKey)
	return ret, err
}

func (m *defaultUploadHistoryModel) Update(ctx context.Context, newData *UploadHistory) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	uploadHistoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryIdPrefix, data.Id)
	uploadHistoryRepositoryIdKey := fmt.Sprintf("%s%v", cacheUploadHistoryRepositoryIdPrefix, data.RepositoryId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, uploadHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FileName, newData.Size, newData.RepositoryId, newData.Status, newData.Id)
	}, uploadHistoryIdKey, uploadHistoryRepositoryIdKey)
	return err
}

func (m *defaultUploadHistoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUploadHistoryIdPrefix, primary)
}

func (m *defaultUploadHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", uploadHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUploadHistoryModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user_center.proto

package server

import (
	"context"

	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/user_center/rpc/internal/logic/userrepositoryrpc"
	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/user_center/rpc/internal/svc"
	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/user_center/rpc/pb"
)

type UserRepositoryRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserRepositoryRpcServer
}

func NewUserRepositoryRpcServer(svcCtx *svc.ServiceContext) *UserRepositoryRpcServer {
	return &UserRepositoryRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRepositoryRpcServer) GetUserRepositoryNameByRepositoryId(ctx context.Context, in *pb.RepositoryIdReq) (*pb.UserRepositoryNameReply, error) {
	l := userrepositoryrpclogic.NewGetUserRepositoryNameByRepositoryIdLogic(ctx, s.svcCtx)
	return l.GetUserRepositoryNameByRepositoryId(in)
}

func (s *UserRepositoryRpcServer) FindRepositoryIdById(ctx context.Context, in *pb.FindRepositoryIdReq) (*pb.FindRepositoryIdReply, error) {
	l := userrepositoryrpclogic.NewFindRepositoryIdByIdLogic(ctx, s.svcCtx)
	return l.FindRepositoryIdById(in)
}

func (s *UserRepositoryRpcServer) CreateByShare(ctx context.Context, in *pb.CreateByShareReq) (*pb.CreateByShareReply, error) {
	l := userrepositoryrpclogic.NewCreateByShareLogic(ctx, s.svcCtx)
	return l.CreateByShare(in)
}

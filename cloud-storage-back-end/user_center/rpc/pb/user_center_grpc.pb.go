// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: user_center.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserServiceRpc_DecreaseVolume_FullMethodName = "/pb.UserServiceRpc/decreaseVolume"
	UserServiceRpc_FindVolumeById_FullMethodName = "/pb.UserServiceRpc/findVolumeById"
	UserServiceRpc_AddVolume_FullMethodName      = "/pb.UserServiceRpc/addVolume"
)

// UserServiceRpcClient is the client API for UserServiceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceRpcClient interface {
	DecreaseVolume(ctx context.Context, in *DecreaseVolumeReq, opts ...grpc.CallOption) (*DecreaseVolumeResp, error)
	FindVolumeById(ctx context.Context, in *FindVolumeReq, opts ...grpc.CallOption) (*FindVolumeResp, error)
	AddVolume(ctx context.Context, in *AddVolumeReq, opts ...grpc.CallOption) (*AddVolumeResp, error)
}

type userServiceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceRpcClient(cc grpc.ClientConnInterface) UserServiceRpcClient {
	return &userServiceRpcClient{cc}
}

func (c *userServiceRpcClient) DecreaseVolume(ctx context.Context, in *DecreaseVolumeReq, opts ...grpc.CallOption) (*DecreaseVolumeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecreaseVolumeResp)
	err := c.cc.Invoke(ctx, UserServiceRpc_DecreaseVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceRpcClient) FindVolumeById(ctx context.Context, in *FindVolumeReq, opts ...grpc.CallOption) (*FindVolumeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindVolumeResp)
	err := c.cc.Invoke(ctx, UserServiceRpc_FindVolumeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceRpcClient) AddVolume(ctx context.Context, in *AddVolumeReq, opts ...grpc.CallOption) (*AddVolumeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVolumeResp)
	err := c.cc.Invoke(ctx, UserServiceRpc_AddVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceRpcServer is the server API for UserServiceRpc service.
// All implementations must embed UnimplementedUserServiceRpcServer
// for forward compatibility.
type UserServiceRpcServer interface {
	DecreaseVolume(context.Context, *DecreaseVolumeReq) (*DecreaseVolumeResp, error)
	FindVolumeById(context.Context, *FindVolumeReq) (*FindVolumeResp, error)
	AddVolume(context.Context, *AddVolumeReq) (*AddVolumeResp, error)
	mustEmbedUnimplementedUserServiceRpcServer()
}

// UnimplementedUserServiceRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceRpcServer struct{}

func (UnimplementedUserServiceRpcServer) DecreaseVolume(context.Context, *DecreaseVolumeReq) (*DecreaseVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseVolume not implemented")
}
func (UnimplementedUserServiceRpcServer) FindVolumeById(context.Context, *FindVolumeReq) (*FindVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVolumeById not implemented")
}
func (UnimplementedUserServiceRpcServer) AddVolume(context.Context, *AddVolumeReq) (*AddVolumeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVolume not implemented")
}
func (UnimplementedUserServiceRpcServer) mustEmbedUnimplementedUserServiceRpcServer() {}
func (UnimplementedUserServiceRpcServer) testEmbeddedByValue()                        {}

// UnsafeUserServiceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceRpcServer will
// result in compilation errors.
type UnsafeUserServiceRpcServer interface {
	mustEmbedUnimplementedUserServiceRpcServer()
}

func RegisterUserServiceRpcServer(s grpc.ServiceRegistrar, srv UserServiceRpcServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserServiceRpc_ServiceDesc, srv)
}

func _UserServiceRpc_DecreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceRpcServer).DecreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceRpc_DecreaseVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceRpcServer).DecreaseVolume(ctx, req.(*DecreaseVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceRpc_FindVolumeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceRpcServer).FindVolumeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceRpc_FindVolumeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceRpcServer).FindVolumeById(ctx, req.(*FindVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceRpc_AddVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceRpcServer).AddVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServiceRpc_AddVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceRpcServer).AddVolume(ctx, req.(*AddVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceRpc_ServiceDesc is the grpc.ServiceDesc for UserServiceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserServiceRpc",
	HandlerType: (*UserServiceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "decreaseVolume",
			Handler:    _UserServiceRpc_DecreaseVolume_Handler,
		},
		{
			MethodName: "findVolumeById",
			Handler:    _UserServiceRpc_FindVolumeById_Handler,
		},
		{
			MethodName: "addVolume",
			Handler:    _UserServiceRpc_AddVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center.proto",
}

const (
	UserRepositoryRpc_GetUserRepositoryNameByRepositoryId_FullMethodName = "/pb.userRepositoryRpc/getUserRepositoryNameByRepositoryId"
	UserRepositoryRpc_FindRepositoryIdById_FullMethodName                = "/pb.userRepositoryRpc/findRepositoryIdById"
	UserRepositoryRpc_CreateByShare_FullMethodName                       = "/pb.userRepositoryRpc/createByShare"
)

// UserRepositoryRpcClient is the client API for UserRepositoryRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepositoryRpcClient interface {
	GetUserRepositoryNameByRepositoryId(ctx context.Context, in *RepositoryIdReq, opts ...grpc.CallOption) (*UserRepositoryNameReply, error)
	FindRepositoryIdById(ctx context.Context, in *FindRepositoryIdReq, opts ...grpc.CallOption) (*FindRepositoryIdReply, error)
	CreateByShare(ctx context.Context, in *CreateByShareReq, opts ...grpc.CallOption) (*CreateByShareReply, error)
}

type userRepositoryRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepositoryRpcClient(cc grpc.ClientConnInterface) UserRepositoryRpcClient {
	return &userRepositoryRpcClient{cc}
}

func (c *userRepositoryRpcClient) GetUserRepositoryNameByRepositoryId(ctx context.Context, in *RepositoryIdReq, opts ...grpc.CallOption) (*UserRepositoryNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRepositoryNameReply)
	err := c.cc.Invoke(ctx, UserRepositoryRpc_GetUserRepositoryNameByRepositoryId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryRpcClient) FindRepositoryIdById(ctx context.Context, in *FindRepositoryIdReq, opts ...grpc.CallOption) (*FindRepositoryIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindRepositoryIdReply)
	err := c.cc.Invoke(ctx, UserRepositoryRpc_FindRepositoryIdById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryRpcClient) CreateByShare(ctx context.Context, in *CreateByShareReq, opts ...grpc.CallOption) (*CreateByShareReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateByShareReply)
	err := c.cc.Invoke(ctx, UserRepositoryRpc_CreateByShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepositoryRpcServer is the server API for UserRepositoryRpc service.
// All implementations must embed UnimplementedUserRepositoryRpcServer
// for forward compatibility.
type UserRepositoryRpcServer interface {
	GetUserRepositoryNameByRepositoryId(context.Context, *RepositoryIdReq) (*UserRepositoryNameReply, error)
	FindRepositoryIdById(context.Context, *FindRepositoryIdReq) (*FindRepositoryIdReply, error)
	CreateByShare(context.Context, *CreateByShareReq) (*CreateByShareReply, error)
	mustEmbedUnimplementedUserRepositoryRpcServer()
}

// UnimplementedUserRepositoryRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserRepositoryRpcServer struct{}

func (UnimplementedUserRepositoryRpcServer) GetUserRepositoryNameByRepositoryId(context.Context, *RepositoryIdReq) (*UserRepositoryNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRepositoryNameByRepositoryId not implemented")
}
func (UnimplementedUserRepositoryRpcServer) FindRepositoryIdById(context.Context, *FindRepositoryIdReq) (*FindRepositoryIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRepositoryIdById not implemented")
}
func (UnimplementedUserRepositoryRpcServer) CreateByShare(context.Context, *CreateByShareReq) (*CreateByShareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByShare not implemented")
}
func (UnimplementedUserRepositoryRpcServer) mustEmbedUnimplementedUserRepositoryRpcServer() {}
func (UnimplementedUserRepositoryRpcServer) testEmbeddedByValue()                           {}

// UnsafeUserRepositoryRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepositoryRpcServer will
// result in compilation errors.
type UnsafeUserRepositoryRpcServer interface {
	mustEmbedUnimplementedUserRepositoryRpcServer()
}

func RegisterUserRepositoryRpcServer(s grpc.ServiceRegistrar, srv UserRepositoryRpcServer) {
	// If the following call pancis, it indicates UnimplementedUserRepositoryRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserRepositoryRpc_ServiceDesc, srv)
}

func _UserRepositoryRpc_GetUserRepositoryNameByRepositoryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryRpcServer).GetUserRepositoryNameByRepositoryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRepositoryRpc_GetUserRepositoryNameByRepositoryId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryRpcServer).GetUserRepositoryNameByRepositoryId(ctx, req.(*RepositoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepositoryRpc_FindRepositoryIdById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRepositoryIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryRpcServer).FindRepositoryIdById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRepositoryRpc_FindRepositoryIdById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryRpcServer).FindRepositoryIdById(ctx, req.(*FindRepositoryIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepositoryRpc_CreateByShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateByShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryRpcServer).CreateByShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRepositoryRpc_CreateByShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryRpcServer).CreateByShare(ctx, req.(*CreateByShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRepositoryRpc_ServiceDesc is the grpc.ServiceDesc for UserRepositoryRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepositoryRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userRepositoryRpc",
	HandlerType: (*UserRepositoryRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserRepositoryNameByRepositoryId",
			Handler:    _UserRepositoryRpc_GetUserRepositoryNameByRepositoryId_Handler,
		},
		{
			MethodName: "findRepositoryIdById",
			Handler:    _UserRepositoryRpc_FindRepositoryIdById_Handler,
		},
		{
			MethodName: "createByShare",
			Handler:    _UserRepositoryRpc_CreateByShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center.proto",
}

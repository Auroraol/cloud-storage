// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByMobile(ctx context.Context, mobile sql.NullInt64) (*User, error)
		FindOneByUsername(ctx context.Context, username sql.NullString) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id          int64          `db:"id"` // 用户id
		Version     int64          `db:"version"`
		Username    sql.NullString `db:"username"` // 用户名
		Password    sql.NullString `db:"password"` // 密码
		Mobile      sql.NullInt64  `db:"mobile"`   // 手机号
		Nickname    string         `db:"nickname"` // 昵称
		Gender      int64          `db:"gender"`   // 性别，1：男，0：女，默认为1
		Avatar      sql.NullString `db:"avatar"`   // 用户头像
		Birthday    sql.NullTime   `db:"birthday"` // 生日
		Email       sql.NullString `db:"email"`    // 电子邮箱
		Brief       sql.NullString `db:"brief"`    // 简介|个性签名
		Info        sql.NullString `db:"info"`
		DelState    sql.NullInt64  `db:"del_state"`    // 删除状态，0: 未删除，1：已删除
		DeleteTime  sql.NullTime   `db:"delete_time"`  // 删除时间
		Status      int64          `db:"status"`       // 状态，0：正常，1：锁定，2：禁用，3：过期
		Admin       int64          `db:"admin"`        // 是否管理员，1：是，0：否
		NowVolume   int64          `db:"now_volume"`   // 当前存储容量
		TotalVolume int64          `db:"total_volume"` // 最大存储容量
		CreateTime  time.Time      `db:"create_time"`
		UpdateTime  time.Time      `db:"update_time"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile sql.NullInt64) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, mobile)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username sql.NullString) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Version, data.Username, data.Password, data.Mobile, data.Nickname, data.Gender, data.Avatar, data.Birthday, data.Email, data.Brief, data.Info, data.DelState, data.DeleteTime, data.Status, data.Admin, data.NowVolume, data.TotalVolume)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Version, newData.Username, newData.Password, newData.Mobile, newData.Nickname, newData.Gender, newData.Avatar, newData.Birthday, newData.Email, newData.Brief, newData.Info, newData.DelState, newData.DeleteTime, newData.Status, newData.Admin, newData.NowVolume, newData.TotalVolume, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

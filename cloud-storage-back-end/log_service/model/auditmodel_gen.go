// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	auditFieldNames          = builder.RawFieldNames(&Audit{})
	auditRows                = strings.Join(auditFieldNames, ",")
	auditRowsExpectAutoSet   = strings.Join(stringx.Remove(auditFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	auditRowsWithPlaceHolder = strings.Join(stringx.Remove(auditFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuditIdPrefix = "cache:audit:id:"
)

type (
	auditModel interface {
		Insert(ctx context.Context, data *Audit) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Audit, error)
		Update(ctx context.Context, data *Audit) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAuditModel struct {
		sqlc.CachedConn
		table string
	}

	Audit struct {
		Id         uint64 `db:"id"`          // 操作记录ID
		UserId     uint64 `db:"user_id"`     // 用户id
		Content    string `db:"content"`     // 操作内容
		Flag       int64  `db:"flag"`        // 操作类型，0：上传，1：下载，2：删除，3：重命名，4：移动，5：复制，6：创建文件夹，7：修改文件
		FileSize   int64  `db:"file_size"`   // 文件大小
		CreateTime int64  `db:"create_time"` // 创建时间戳
	}
)

func newAuditModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAuditModel {
	return &defaultAuditModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`audit`",
	}
}

func (m *defaultAuditModel) Delete(ctx context.Context, id uint64) error {
	auditIdKey := fmt.Sprintf("%s%v", cacheAuditIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, auditIdKey)
	return err
}

func (m *defaultAuditModel) FindOne(ctx context.Context, id uint64) (*Audit, error) {
	auditIdKey := fmt.Sprintf("%s%v", cacheAuditIdPrefix, id)
	var resp Audit
	err := m.QueryRowCtx(ctx, &resp, auditIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", auditRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAuditModel) Insert(ctx context.Context, data *Audit) (sql.Result, error) {
	auditIdKey := fmt.Sprintf("%s%v", cacheAuditIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, auditRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Content, data.Flag, data.FileSize)
	}, auditIdKey)
	return ret, err
}

func (m *defaultAuditModel) Update(ctx context.Context, data *Audit) error {
	auditIdKey := fmt.Sprintf("%s%v", cacheAuditIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, auditRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Content, data.Flag, data.FileSize, data.Id)
	}, auditIdKey)
	return err
}

func (m *defaultAuditModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuditIdPrefix, primary)
}

func (m *defaultAuditModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", auditRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAuditModel) tableName() string {
	return m.table
}

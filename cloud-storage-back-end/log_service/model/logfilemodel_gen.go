// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	logfileFieldNames          = builder.RawFieldNames(&Logfile{})
	logfileRows                = strings.Join(logfileFieldNames, ",")
	logfileRowsExpectAutoSet   = strings.Join(stringx.Remove(logfileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	logfileRowsWithPlaceHolder = strings.Join(stringx.Remove(logfileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLogfileIdPrefix = "cache:logfile:id:"
)

type (
	logfileModel interface {
		Insert(ctx context.Context, data *Logfile) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Logfile, error)
		Update(ctx context.Context, data *Logfile) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultLogfileModel struct {
		sqlc.CachedConn
		table string
	}

	Logfile struct {
		Id            uint64         `db:"id"` // 日志文件ID
		UserId        int64          `db:"user_id"`
		Name          string         `db:"name"`           // 日志文件名
		Host          string         `db:"host"`           // 主机信息
		Path          string         `db:"path"`           // 日志文件路径
		CreateTime    sql.NullTime   `db:"create_time"`    // 创建时间
		Comment       sql.NullString `db:"comment"`        // 备注
		MonitorChoice sql.NullInt64  `db:"monitor_choice"` // 监控选择
	}
)

func newLogfileModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLogfileModel {
	return &defaultLogfileModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`logfile`",
	}
}

func (m *defaultLogfileModel) Delete(ctx context.Context, id uint64) error {
	logfileIdKey := fmt.Sprintf("%s%v", cacheLogfileIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, logfileIdKey)
	return err
}

func (m *defaultLogfileModel) FindOne(ctx context.Context, id uint64) (*Logfile, error) {
	logfileIdKey := fmt.Sprintf("%s%v", cacheLogfileIdPrefix, id)
	var resp Logfile
	err := m.QueryRowCtx(ctx, &resp, logfileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logfileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLogfileModel) Insert(ctx context.Context, data *Logfile) (sql.Result, error) {
	logfileIdKey := fmt.Sprintf("%s%v", cacheLogfileIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, logfileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Host, data.Path, data.Comment, data.MonitorChoice)
	}, logfileIdKey)
	return ret, err
}

func (m *defaultLogfileModel) Update(ctx context.Context, data *Logfile) error {
	logfileIdKey := fmt.Sprintf("%s%v", cacheLogfileIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, logfileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Host, data.Path, data.Comment, data.MonitorChoice, data.Id)
	}, logfileIdKey)
	return err
}

func (m *defaultLogfileModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLogfileIdPrefix, primary)
}

func (m *defaultLogfileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", logfileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLogfileModel) tableName() string {
	return m.table
}

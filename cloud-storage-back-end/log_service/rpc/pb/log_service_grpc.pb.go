// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: log_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuditServiceRpc_CreateOperationLog_FullMethodName = "/pb.AuditServiceRpc/CreateOperationLog"
)

// AuditServiceRpcClient is the client API for AuditServiceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditServiceRpcClient interface {
	// 创建操作记录
	CreateOperationLog(ctx context.Context, in *OperationLogReq, opts ...grpc.CallOption) (*OperationLogResp, error)
}

type auditServiceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceRpcClient(cc grpc.ClientConnInterface) AuditServiceRpcClient {
	return &auditServiceRpcClient{cc}
}

func (c *auditServiceRpcClient) CreateOperationLog(ctx context.Context, in *OperationLogReq, opts ...grpc.CallOption) (*OperationLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationLogResp)
	err := c.cc.Invoke(ctx, AuditServiceRpc_CreateOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceRpcServer is the server API for AuditServiceRpc service.
// All implementations must embed UnimplementedAuditServiceRpcServer
// for forward compatibility.
type AuditServiceRpcServer interface {
	// 创建操作记录
	CreateOperationLog(context.Context, *OperationLogReq) (*OperationLogResp, error)
	mustEmbedUnimplementedAuditServiceRpcServer()
}

// UnimplementedAuditServiceRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuditServiceRpcServer struct{}

func (UnimplementedAuditServiceRpcServer) CreateOperationLog(context.Context, *OperationLogReq) (*OperationLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationLog not implemented")
}
func (UnimplementedAuditServiceRpcServer) mustEmbedUnimplementedAuditServiceRpcServer() {}
func (UnimplementedAuditServiceRpcServer) testEmbeddedByValue()                         {}

// UnsafeAuditServiceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServiceRpcServer will
// result in compilation errors.
type UnsafeAuditServiceRpcServer interface {
	mustEmbedUnimplementedAuditServiceRpcServer()
}

func RegisterAuditServiceRpcServer(s grpc.ServiceRegistrar, srv AuditServiceRpcServer) {
	// If the following call pancis, it indicates UnimplementedAuditServiceRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuditServiceRpc_ServiceDesc, srv)
}

func _AuditServiceRpc_CreateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceRpcServer).CreateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditServiceRpc_CreateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceRpcServer).CreateOperationLog(ctx, req.(*OperationLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditServiceRpc_ServiceDesc is the grpc.ServiceDesc for AuditServiceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditServiceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuditServiceRpc",
	HandlerType: (*AuditServiceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperationLog",
			Handler:    _AuditServiceRpc_CreateOperationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_service.proto",
}

const (
	SshServiceRpc_SaveSshInfo_FullMethodName   = "/pb.SshServiceRpc/SaveSshInfo"
	SshServiceRpc_DeleteSshInfo_FullMethodName = "/pb.SshServiceRpc/DeleteSshInfo"
	SshServiceRpc_GetSshInfo_FullMethodName    = "/pb.SshServiceRpc/GetSshInfo"
)

// SshServiceRpcClient is the client API for SshServiceRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshServiceRpcClient interface {
	// 保存ssh信息
	SaveSshInfo(ctx context.Context, in *SshInfoReq, opts ...grpc.CallOption) (*SshInfoResp, error)
	// 删除ssh信息
	DeleteSshInfo(ctx context.Context, in *DeleteSshInfoReq, opts ...grpc.CallOption) (*SshInfoResp, error)
	// 查询ssh信息
	GetSshInfo(ctx context.Context, in *GetSshInfosReq, opts ...grpc.CallOption) (*SshInfoListResp, error)
}

type sshServiceRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSshServiceRpcClient(cc grpc.ClientConnInterface) SshServiceRpcClient {
	return &sshServiceRpcClient{cc}
}

func (c *sshServiceRpcClient) SaveSshInfo(ctx context.Context, in *SshInfoReq, opts ...grpc.CallOption) (*SshInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshInfoResp)
	err := c.cc.Invoke(ctx, SshServiceRpc_SaveSshInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshServiceRpcClient) DeleteSshInfo(ctx context.Context, in *DeleteSshInfoReq, opts ...grpc.CallOption) (*SshInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshInfoResp)
	err := c.cc.Invoke(ctx, SshServiceRpc_DeleteSshInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshServiceRpcClient) GetSshInfo(ctx context.Context, in *GetSshInfosReq, opts ...grpc.CallOption) (*SshInfoListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshInfoListResp)
	err := c.cc.Invoke(ctx, SshServiceRpc_GetSshInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshServiceRpcServer is the server API for SshServiceRpc service.
// All implementations must embed UnimplementedSshServiceRpcServer
// for forward compatibility.
type SshServiceRpcServer interface {
	// 保存ssh信息
	SaveSshInfo(context.Context, *SshInfoReq) (*SshInfoResp, error)
	// 删除ssh信息
	DeleteSshInfo(context.Context, *DeleteSshInfoReq) (*SshInfoResp, error)
	// 查询ssh信息
	GetSshInfo(context.Context, *GetSshInfosReq) (*SshInfoListResp, error)
	mustEmbedUnimplementedSshServiceRpcServer()
}

// UnimplementedSshServiceRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSshServiceRpcServer struct{}

func (UnimplementedSshServiceRpcServer) SaveSshInfo(context.Context, *SshInfoReq) (*SshInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSshInfo not implemented")
}
func (UnimplementedSshServiceRpcServer) DeleteSshInfo(context.Context, *DeleteSshInfoReq) (*SshInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSshInfo not implemented")
}
func (UnimplementedSshServiceRpcServer) GetSshInfo(context.Context, *GetSshInfosReq) (*SshInfoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSshInfo not implemented")
}
func (UnimplementedSshServiceRpcServer) mustEmbedUnimplementedSshServiceRpcServer() {}
func (UnimplementedSshServiceRpcServer) testEmbeddedByValue()                       {}

// UnsafeSshServiceRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshServiceRpcServer will
// result in compilation errors.
type UnsafeSshServiceRpcServer interface {
	mustEmbedUnimplementedSshServiceRpcServer()
}

func RegisterSshServiceRpcServer(s grpc.ServiceRegistrar, srv SshServiceRpcServer) {
	// If the following call pancis, it indicates UnimplementedSshServiceRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SshServiceRpc_ServiceDesc, srv)
}

func _SshServiceRpc_SaveSshInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SshInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshServiceRpcServer).SaveSshInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshServiceRpc_SaveSshInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshServiceRpcServer).SaveSshInfo(ctx, req.(*SshInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshServiceRpc_DeleteSshInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSshInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshServiceRpcServer).DeleteSshInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshServiceRpc_DeleteSshInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshServiceRpcServer).DeleteSshInfo(ctx, req.(*DeleteSshInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshServiceRpc_GetSshInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSshInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshServiceRpcServer).GetSshInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshServiceRpc_GetSshInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshServiceRpcServer).GetSshInfo(ctx, req.(*GetSshInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SshServiceRpc_ServiceDesc is the grpc.ServiceDesc for SshServiceRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshServiceRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SshServiceRpc",
	HandlerType: (*SshServiceRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveSshInfo",
			Handler:    _SshServiceRpc_SaveSshInfo_Handler,
		},
		{
			MethodName: "DeleteSshInfo",
			Handler:    _SshServiceRpc_DeleteSshInfo_Handler,
		},
		{
			MethodName: "GetSshInfo",
			Handler:    _SshServiceRpc_GetSshInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_service.proto",
}

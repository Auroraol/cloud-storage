// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: log_service.proto

package server

import (
	"context"

	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/log_service/rpc/internal/logic/sshservicerpc"
	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/log_service/rpc/internal/svc"
	"github.com/Auroraol/cloud-storage/tree/main/cloud-storage-back-end/log_service/rpc/pb"
)

type SshServiceRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedSshServiceRpcServer
}

func NewSshServiceRpcServer(svcCtx *svc.ServiceContext) *SshServiceRpcServer {
	return &SshServiceRpcServer{
		svcCtx: svcCtx,
	}
}

// 保存ssh信息
func (s *SshServiceRpcServer) SaveSshInfo(ctx context.Context, in *pb.SshInfoReq) (*pb.SshInfoResp, error) {
	l := sshservicerpclogic.NewSaveSshInfoLogic(ctx, s.svcCtx)
	return l.SaveSshInfo(in)
}

// 删除ssh信息
func (s *SshServiceRpcServer) DeleteSshInfo(ctx context.Context, in *pb.DeleteSshInfoReq) (*pb.SshInfoResp, error) {
	l := sshservicerpclogic.NewDeleteSshInfoLogic(ctx, s.svcCtx)
	return l.DeleteSshInfo(in)
}

// 查询ssh信息
func (s *SshServiceRpcServer) GetSshInfo(ctx context.Context, in *pb.GetSshInfosReq) (*pb.SshInfoListResp, error) {
	l := sshservicerpclogic.NewGetSshInfoLogic(ctx, s.svcCtx)
	return l.GetSshInfo(in)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package types

type DeleteSSHConnectReq struct {
	SshId int64 `json:"ssh_id"`
}

type DeleteSSHConnectRes struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	SshId   int64  `json:"ssh_id"`
}

type GetLogFilesReq struct {
	Host string `json:"host"` // 主机地址
	Path string `json:"path"` // 日志路径
}

type GetLogFilesRes struct {
	Files   []string `json:"files"`   // 文件列表
	Success bool     `json:"success"` // 是否成功
}

type GetOperationLogReq struct {
	Page      int   `json:"page"`
	PageSize  int   `json:"page_size"`
	Flag      int   `json:"flag"`       //操作类型，0：上传，1：下载，2：删除，3.恢复 4：重命名，5：移动，6：复制，7：创建文件夹，8：修改文件, -1: 全部
	StartTime int64 `json:"start_time"` // 时间戳(秒)
	EndTime   int64 `json:"end_time"`   // 时间戳(秒)
}

type GetOperationLogRes struct {
	Total         int            `json:"total"`
	OperationLogs []OperationLog `json:"operation_logs"`
}

type GetSSHConnectReq struct {
}

type HistoryAnalysisReq struct {
	Host      string `json:"host"`       // 主机地址
	LogFile   string `json:"log_file"`   // 日志文件名
	StartTime int64  `json:"start_time"` // 开始时间
	EndTime   int64  `json:"end_time"`   // 结束时间
	Keywords  string `json:"keywords"`   // 关键字
	Page      int    `json:"page"`       // 页码
	PageSize  int    `json:"page_size"`  // 每页大小
}

type HistoryAnalysisRes struct {
	Data     []LogEntry `json:"data"`      // 日志条目
	Total    int        `json:"total"`     // 总数
	Page     int        `json:"page"`      // 页码
	PageSize int        `json:"page_size"` // 每页大小
	Success  bool       `json:"success"`   // 是否成功
}

type LogEntry struct {
	Timestamp int64  `json:"timestamp"` // 时间戳
	Content   string `json:"content"`   // 内容
	Level     string `json:"level"`     // 级别
	Value     int    `json:"value"`     // 数量
}

type MonitorData struct {
	Timestamp int64  `json:"timestamp"` // 时间戳
	Value     int    `json:"value"`     // 数量
	Type      string `json:"type"`      // 类型（请求数、错误数、响应时间）
}

type OperationLog struct {
	Content   string `json:"content"`
	FileSize  int    `json:"file_size"`
	CreatedAt string `json:"created_at"`
	Flag      int    `json:"flag"`
	FileName  string `json:"file_name"`
	FileId    string `json:"file_id"`
}

type ReadLogFileReq struct {
	Host     string `json:"host"`      // 主机地址
	Path     string `json:"path"`      // 日志路径
	Match    string `json:"match"`     // 匹配字符串
	Page     int    `json:"page"`      // 页码
	PageSize int    `json:"page_size"` // 每页大小
}

type ReadLogFileRes struct {
	Contents   []string `json:"contents"`    // 内容
	TotalLines int      `json:"total_lines"` // 总行数
	Page       int      `json:"page"`        // 页码
	PageSize   int      `json:"page_size"`   // 每页大小
	Success    bool     `json:"success"`     // 是否成功
}

type RealTimeMonitorReq struct {
	Host         string   `json:"host"`          // 主机地址
	LogFile      string   `json:"log_file"`      // 日志文件名
	MonitorItems []string `json:"monitor_items"` // 监控项（requests,errors,debug_logs,info_logs,warn_logs,error_logs）
	TimeRange    int      `json:"time_range"`    // 时间范围（1小时、6小时、12小时、24小时）
}

type RealTimeMonitorRes struct {
	Data    []MonitorData `json:"data"`    // 监控数据
	Total   int           `json:"total"`   // 总数
	Success bool          `json:"success"` // 是否成功
}

type SSHConnectReq struct {
	Host           string `json:"host"` // 主机地址
	Port           int    `json:"port"`
	User           string `json:"user"`                       // 用户名
	Password       string `json:"password"`                   // 密码
	PrivateKeyPath string `json:"private_key_path, optional"` // 私钥路径
}

type SSHConnectRes struct {
	Success bool   `json:"success"` // 是否成功
	Message string `json:"message"` // 消息
}

type SshInfoDetailResp struct {
	UserId   int64  `json:"user_id"`  // 关联用户ID
	SshId    int64  `json:"ssh_id"`   // SSH记录ID
	Host     string `json:"host"`     // 主机地址
	Port     int32  `json:"port"`     // 端口号
	User     string `json:"user"`     // 用户名
	Password string `json:"password"` // 密码（建议在前端脱敏处理）
}

type SshInfoListResp struct {
	Items []*SshInfoDetailResp `json:"items"` // SSH记录列表
}

//syntax = "v1"
//
//type SomeOtherReq struct {
// Logfile string `form:"logfile"`
// Path    string `form:"path"`
// Host    string `form:"host"`
// Match   string `form:"match"`
// Clean   string `form:"clean"`
// Posit   string `form:"posit"`
// Page    int    `form:"page"`
//}
//
//type SomeOtherResp struct {
// // Define your response fields here
//}
//
//@server (
// //代表当前service的代码会放在account目录下
// //这里注意 冒汗要紧贴着key
// group: account
// //路由前缀
// prefix: v1
	//)
////影响配置文件名称和主文件名称
//service user-api {
// //handler中的函数名称
// @handler register
// post /user/register (RegisterReq) returns (RegisterResp)
//
// @handler login
// post /user/login (LoginReq) returns (LoginResp)
//}
syntax = "v1"

info (
	title:   "用户中心服务"
	desc:    "用户中心服务"
	author:  "Mikael"
	email:   "13247629622@163.com"
	version: "v1"
)

import (
	"user/user.api"
)

//============================> usercenter v1 <============================
//no need login
@server (
	//路由前缀
	prefix: usercenter/v1
	//代表当前service的代码会放在account目录下
	//这里注意 冒汗要紧贴着key
	group: user
)
//影响配置文件名称和主文件名称
service usercenter {
	@doc "register"
	@handler register //handler中的函数名称
	post /user/register (RegisterReq) returns (RegisterResp)

	@doc "login"
	@handler login
	post /user/login (LoginReq) returns (LoginResp)
}

//need login
@server (
	prefix: usercenter/v1
	group:  user
	jwt:    JwtAuth
)
service usercenter {
	@doc "get user info"
	@handler detail
	post /user/detail (UserInfoReq) returns (UserInfoResp)

	@doc "wechat mini auth"
	@handler wxMiniAuth
	post /user/wxMiniAuth (WXMiniAuthReq) returns (WXMiniAuthResp)
}

